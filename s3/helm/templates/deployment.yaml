---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels: &labels
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels: *labels
  template:
    metadata:
      labels: *labels
      annotations:
        {{- if .Values.consul.enabled }}
        'consul.hashicorp.com/connect-inject': "true"
        'consul.hashicorp.com/connect-service': "{{ .Release.Name }}"
        'consul.hashicorp.com/connect-service-port': "grpc"
        'consul.hashicorp.com/connect-service-upstreams': "localstack:8081,tempo:8082"
        {{- with .Values.resources }}
        'consul.hashicorp.com/sidecar-proxy-memory-request': "{{ .requests.memory }}"
        'consul.hashicorp.com/sidecar-proxy-cpu-request': "{{ .requests.cpu }}"
        'consul.hashicorp.com/sidecar-proxy-memory-limit': "{{ .limits.memory }}"
        'consul.hashicorp.com/sidecar-proxy-cpu-limit': "{{ .limits.cpu }}"
        {{- end }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          volumeMounts:
            {{- if .Values.csi.enabled }}
            - name: {{ .Release.Name }}
              mountPath: "/mnt/{{ .Release.Name }}"
              readOnly: true
            {{- end }}
          env:
            - name: AWS_S3_ENDPOINT
              {{- if .Values.consul.enabled }}
              value: "localhost:8081"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: aws_s3_endpoint
              {{- end }}
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: aws_region
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: aws_secret_access_key
            - name: AWS_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: aws_s3_bucket
            - name: TEMPO_URL
              {{- if $.Values.consul.enabled }}
              value: "localhost:8082"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Release.Name }}
                  key: tempo_url
              {{- end }}
            - name: S3_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: s3_token
            - name: S3_GRPC_PORT
              value: "8080"
            - name: S3_METRICS_PORT
              value: "9090"
          ports:
            - name: grpc
              protocol: TCP
              containerPort: 8080
            - name: metrics
              protocol: TCP
              containerPort: 9090
          resources:
            {{- with .Values.resources }}
            requests:
              memory: {{ .requests.memory }}
              cpu: {{ .requests.cpu }}
            limits:
              memory: {{ .limits.memory }}
              cpu: {{ .limits.cpu }}
            {{- end }}
          startupProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080", "-service=readiness"]
            initialDelaySeconds: 5
            periodSeconds: 1
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080", "-service=readiness"]
            initialDelaySeconds: 0
            periodSeconds: 1
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080", "-service=liveness"]
            initialDelaySeconds: 0
            periodSeconds: 1
            failureThreshold: 10
            successThreshold: 1
            timeoutSeconds: 5
      volumes:
        {{- if .Values.csi.enabled }}
        - name: {{ .Release.Name }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Release.Name }}
        {{- end }}
