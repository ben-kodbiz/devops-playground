name: CI

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:

env:
  AWS_REGION: eu-central-1
  S3_IMAGE_REPOSITORY: ${{ github.repository }}/s3
  S3_IMAGE_TAG: 1.0.0
  DYNAMO_IMAGE_REPOSITORY: ${{ github.repository }}/dynamo
  DYNAMO_IMAGE_TAG: 1.0.0
  GATEWAY_IMAGE_REPOSITORY: ${{ github.repository }}/gateway
  GATEWAY_IMAGE_TAG: 1.0.0
  CLI_IMAGE_REPOSITORY: ${{ github.repository }}/cli
  CLI_IMAGE_TAG: 1.0.0

jobs:
  s3:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install protobuf
        run: |
          sudo apt-get update && sudo apt-get install golang-goprotobuf-dev
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Compile proto files
        run: make -C s3 compile

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: s3

      - name: Build and run short tests
        run: make -C s3 build

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: s3
          file: s3/Dockerfile
          pull: true
          push: true
          tags: |
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.S3_IMAGE_REPOSITORY }}:latest
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.S3_IMAGE_REPOSITORY }}:${{ env.S3_IMAGE_TAG }}

  dynamo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install protobuf
        run: |
          sudo apt-get update && sudo apt-get install golang-goprotobuf-dev
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Compile proto files
        run: make -C dynamo compile

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: dynamo

      - name: Build and run short tests
        run: make -C dynamo build

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: dynamo
          file: dynamo/Dockerfile
          pull: true
          push: true
          tags: |
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.DYNAMO_IMAGE_REPOSITORY }}:latest
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.DYNAMO_IMAGE_REPOSITORY }}:${{ env.DYNAMO_IMAGE_TAG }}

  gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install protobuf
        run: |
          sudo apt-get update && sudo apt-get install golang-goprotobuf-dev
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Compile proto files
        run: make -C gateway compile

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: gateway

      - name: Build and run short tests
        run: make -C gateway build

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: gateway
          file: gateway/Dockerfile
          pull: true
          push: true
          tags: |
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.GATEWAY_IMAGE_REPOSITORY }}:latest
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.GATEWAY_IMAGE_REPOSITORY }}:${{ env.GATEWAY_IMAGE_TAG }}

  cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: cli

      - name: Build and run short tests
        run: make -C cli build

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: cli
          file: cli/Dockerfile
          pull: true
          push: true
          tags: |
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.CLI_IMAGE_REPOSITORY }}:latest
            ${{ secrets.IMAGE_REGISTRY }}/${{ env.CLI_IMAGE_REPOSITORY }}:${{ env.CLI_IMAGE_TAG }}

  test:
    needs: [s3, dynamo, gateway, cli]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Install terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform

      - name: Install protobuf
        run: |
          sudo apt-get update && sudo apt-get install golang-goprotobuf-dev
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

      - name: Build and run all tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_registry_username: ${{ github.repository_owner }}
          TF_VAR_registry_password: ${{ secrets.CR_PAT }}
          TF_VAR_image_registry: ${{ secrets.IMAGE_REGISTRY }}
          TF_VAR_s3_image_repository: ${{ env.S3_IMAGE_REPOSITORY }}
          TF_VAR_s3_image_tag: ${{ env.S3_IMAGE_TAG }}
          TF_VAR_dynamo_image_repository: ${{ env.DYNAMO_IMAGE_REPOSITORY }}
          TF_VAR_dynamo_image_tag: ${{ env.DYNAMO_IMAGE_TAG }}
          TF_VAR_gateway_image_repository: ${{ env.GATEWAY_IMAGE_REPOSITORY }}
          TF_VAR_gateway_image_tag: ${{ env.GATEWAY_IMAGE_TAG }}
          TF_VAR_cli_image_repository: ${{ env.CLI_IMAGE_REPOSITORY }}
          TF_VAR_cli_image_tag: ${{ env.CLI_IMAGE_TAG }}
        run: make ci